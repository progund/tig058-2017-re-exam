public class Birthday {
  private String name;
  private String birthday; // A date in the format "7 Januari"
  private int yearsOld;

  public Birthday(String name, String birthday, int yearsOld) {
    this.name = name;
    this.birthday = birthday;
    this.yearsOld = yearsOld;
  }

  public String name() { return name; }
  public String birthday() { return birthday; }
  public int yearsOld() { return yearsOld; }
  
}
import java.util.List;
import java.util.stream.Collectors;
import java.util.Comparator;
import java.util.Collections;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.nio.file.Files;

public class Birthdays {

  private final static String CSV_FILE = "birthdays.txt";

  private static Birthday fromCsvLine(String line) {
    String[] fields = line.split(";");
    return new Birthday(fields[0], fields[1], Integer.parseInt(fields[2]));
  }

  public static List<Birthday> allBirthdays() throws IOException {        
    return Files.lines(Paths.get(CSV_FILE))
      .map(s -> new Birthday(s.split(";")[0],
                             s.split(";")[1],
                             Integer.parseInt(s.split(";")[2])))
      .collect(Collectors.toList());
  }

  public static List<Birthday> teens(List<Birthday> birthdays) {
    return birthdays
      .stream()
      .filter(b ->
              b.yearsOld() > 12 &&
              b.yearsOld() < 20)
      .collect(Collectors.toList());
  }

  public static void printInfo() throws Exception {
    List<Birthday> birthdays = allBirthdays();
    List<Birthday> teens = teens(birthdays);
    Comparator<Birthday> yearComp = Comparator.comparing(Birthday::yearsOld);
    System.out.println("We have " +
                       teens.size() +
                       " teenagers in the family.");
    Collections.sort(teens, yearComp);
    System.out.println(teens.get(0).name() +
                       " is the youngest teen and is " +
                       teens.get(0).yearsOld() +
                       " years old");
    System.out.println(teens.get(teens.size() - 1).name() +
                       " is the oldest teen and is " +
                       teens.get(teens.size() -1).yearsOld() +
                       " years old");
  }
}
public class Main {
  public static void main(String[] args) throws Exception {
    Birthdays.printInfo();
  }
}
